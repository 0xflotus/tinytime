// Generated by BUCKLESCRIPT VERSION 1.7.4, PLEASE EDIT WITH CARE
'use strict';

import * as Curry          from "bs-platform/lib/es6/curry.js";
import * as CamlinternalOO from "bs-platform/lib/es6/camlinternalOO.js";

function getSubstitution(text) {
  switch (text) {
    case "DD" : 
        return /* DayOfTheMonth */11;
    case "Do" : 
        return /* Day */10;
    case "H" : 
        return /* Hour24 */13;
    case "MM" : 
        return /* PartialMonth */2;
    case "MMMM" : 
        return /* FullMonth */1;
    case "Mo" : 
        return /* NumberMonth */12;
    case "YY" : 
        return /* PartialYear */4;
    case "YYYY" : 
        return /* FullYear */3;
    case "a" : 
        return /* PostOrAnteMeridiem */9;
    case "dddd" : 
        return /* DayOfTheWeek */5;
    case "h" : 
        return /* Hour */6;
    case "mm" : 
        return /* Minutes */7;
    case "ss" : 
        return /* Seconds */8;
    default:
      return ( "" );
  }
}

function getNextCharacter(chars, position) {
  var oldPosition = position[0];
  return chars[position[0] = position[0] + 1 | 0, oldPosition];
}

function pushToken(tokens, token) {
  tokens.push(token);
  return /* () */0;
}

var class_tables = [
  0,
  0,
  0
];

function buildTokenList(tokens, characters) {
  if (characters) {
    if (!class_tables[0]) {
      var $$class = CamlinternalOO.create_table(0);
      var env_init = function () {
        return CamlinternalOO.create_object_opt(0, $$class);
      };
      CamlinternalOO.init_class($$class);
      class_tables[0] = env_init;
    }
    return Curry._1(class_tables[0], 0);
  } else {
    return tokens;
  }
}

function parse(template) {
  var tokens = /* array */[];
  var chars = template.split("");
  var text = "";
  var position = [0];
  while(position[0] < chars.length) {
    var c = getNextCharacter(chars, position);
    var match = c;
    if (match === "{") {
      if (text !== "") {
        tokens.push(/* record */[
              /* t : UserText */0,
              /* v */text
            ]);
      }
      text = "";
      var sub = "";
      c = getNextCharacter(chars, position);
      while(c !== "}") {
        sub = sub + c;
        c = getNextCharacter(chars, position);
      };
      var token_000 = /* t */getSubstitution(sub);
      var token = /* record */[
        token_000,
        /* v */""
      ];
      tokens.push(token);
    } else {
      text = text + c;
    }
  };
  if (text !== "") {
    tokens.push(/* record */[
          /* t : UserText */0,
          /* v */text
        ]);
  }
  return tokens;
}

export {
  getSubstitution  ,
  getNextCharacter ,
  pushToken        ,
  buildTokenList   ,
  parse            ,
  
}
/* No side effect */
