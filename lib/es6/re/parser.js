// Generated by BUCKLESCRIPT VERSION 1.7.4, PLEASE EDIT WITH CARE
'use strict';

import * as $$Array from "bs-platform/lib/es6/array.js";

function getSubstitutionType(text) {
  switch (text) {
    case "DD" : 
        return /* DayOfTheMonth */11;
    case "Do" : 
        return /* Day */10;
    case "H" : 
        return /* Hour24 */13;
    case "MM" : 
        return /* PartialMonth */2;
    case "MMMM" : 
        return /* FullMonth */1;
    case "Mo" : 
        return /* NumberMonth */12;
    case "YY" : 
        return /* PartialYear */4;
    case "YYYY" : 
        return /* FullYear */3;
    case "a" : 
        return /* PostOrAnteMeridiem */9;
    case "dddd" : 
        return /* DayOfTheWeek */5;
    case "h" : 
        return /* Hour */6;
    case "mm" : 
        return /* Minutes */7;
    case "ss" : 
        return /* Seconds */8;
    default:
      return ( new Error("Bad sub") );
  }
}

function pushToken(tokens, token) {
  tokens.push(token);
  return /* () */0;
}

function getSubstitution(_param) {
  while(true) {
    var param = _param;
    var acc = param[1];
    var characters = param[0];
    if (characters) {
      var $$char = characters[0];
      if ($$char === "}") {
        return /* tuple */[
                characters[1],
                getSubstitutionType(acc)
              ];
      } else {
        _param = /* tuple */[
          characters[1],
          acc + $$char
        ];
        continue ;
        
      }
    } else {
      return /* tuple */[
              characters,
              getSubstitutionType(acc)
            ];
    }
  };
}

function buildTokenList(tokens, _characters, text) {
  while(true) {
    var characters = _characters;
    if (characters) {
      var tl = characters[1];
      var $$char = characters[0];
      if ($$char === "{") {
        if (text !== "") {
          tokens.push(/* record */[
                /* t : UserText */0,
                /* v */text
              ]);
        }
        var match = getSubstitution(/* tuple */[
              tl,
              ""
            ]);
        tokens.push(/* record */[
              /* t */match[1],
              /* v */""
            ]);
        _characters = match[0];
        continue ;
        
      } else {
        tokens.push(/* record */[
              /* t : UserText */0,
              /* v */$$char
            ]);
        _characters = tl;
        continue ;
        
      }
    } else {
      return tokens;
    }
  };
}

function parse(template) {
  var tokens = /* array */[];
  var chars = template.split("");
  return buildTokenList(tokens, $$Array.to_list(chars), "");
}

export {
  getSubstitutionType ,
  pushToken           ,
  getSubstitution     ,
  buildTokenList      ,
  parse               ,
  
}
/* No side effect */
